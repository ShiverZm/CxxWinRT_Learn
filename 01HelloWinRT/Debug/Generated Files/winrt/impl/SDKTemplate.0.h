// WARNING: Please don't edit this file. It was generated by C++/WinRT v2.0.190404.8

#ifndef WINRT_SDKTemplate_0_H
#define WINRT_SDKTemplate_0_H
namespace winrt::Windows::Foundation::Collections
{
    template <typename T> struct IVector;
}
namespace winrt::Windows::UI::Xaml::Interop
{
    enum class TypeKind : int32_t;
    struct TypeName;
}
namespace winrt::Windows::UI::Xaml::Markup
{
    struct IXamlMetadataProvider;
}
namespace winrt::SDKTemplate
{
    enum class NotifyType : int32_t
    {
        StatusMessage = 0,
        ErrorMessage = 1,
    };
    struct IMainPage;
    struct IMainPageStatics;
    struct IScenario1_SecondaryWindow;
    struct IScenario2_DisplayRegion;
    struct IScenario3_Size;
    struct IScenario4_CompactOverlay;
    struct IScenario5_RelativePositioning;
    struct ISecondaryAppWindowPage;
    struct MainPage;
    struct Scenario1_SecondaryWindow;
    struct Scenario2_DisplayRegion;
    struct Scenario3_Size;
    struct Scenario4_CompactOverlay;
    struct Scenario5_RelativePositioning;
    struct SecondaryAppWindowPage;
    struct XamlMetaDataProvider;
    struct Scenario;
}
namespace winrt::impl
{
    template <> struct category<SDKTemplate::IMainPage>
    {
        using type = interface_category;
    };
    template <> struct category<SDKTemplate::IMainPageStatics>
    {
        using type = interface_category;
    };
    template <> struct category<SDKTemplate::IScenario1_SecondaryWindow>
    {
        using type = interface_category;
    };
    template <> struct category<SDKTemplate::IScenario2_DisplayRegion>
    {
        using type = interface_category;
    };
    template <> struct category<SDKTemplate::IScenario3_Size>
    {
        using type = interface_category;
    };
    template <> struct category<SDKTemplate::IScenario4_CompactOverlay>
    {
        using type = interface_category;
    };
    template <> struct category<SDKTemplate::IScenario5_RelativePositioning>
    {
        using type = interface_category;
    };
    template <> struct category<SDKTemplate::ISecondaryAppWindowPage>
    {
        using type = interface_category;
    };
    template <> struct category<SDKTemplate::MainPage>
    {
        using type = class_category;
    };
    template <> struct category<SDKTemplate::Scenario1_SecondaryWindow>
    {
        using type = class_category;
    };
    template <> struct category<SDKTemplate::Scenario2_DisplayRegion>
    {
        using type = class_category;
    };
    template <> struct category<SDKTemplate::Scenario3_Size>
    {
        using type = class_category;
    };
    template <> struct category<SDKTemplate::Scenario4_CompactOverlay>
    {
        using type = class_category;
    };
    template <> struct category<SDKTemplate::Scenario5_RelativePositioning>
    {
        using type = class_category;
    };
    template <> struct category<SDKTemplate::SecondaryAppWindowPage>
    {
        using type = class_category;
    };
    template <> struct category<SDKTemplate::XamlMetaDataProvider>
    {
        using type = class_category;
    };
    template <> struct category<SDKTemplate::NotifyType>
    {
        using type = enum_category;
    };
    template <> struct category<SDKTemplate::Scenario>
    {
        using type = struct_category<hstring, Windows::UI::Xaml::Interop::TypeName>;
    };
    template <> struct name<SDKTemplate::IMainPage>
    {
        static constexpr auto & value{ L"SDKTemplate.IMainPage" };
    };
    template <> struct name<SDKTemplate::IMainPageStatics>
    {
        static constexpr auto & value{ L"SDKTemplate.IMainPageStatics" };
    };
    template <> struct name<SDKTemplate::IScenario1_SecondaryWindow>
    {
        static constexpr auto & value{ L"SDKTemplate.IScenario1_SecondaryWindow" };
    };
    template <> struct name<SDKTemplate::IScenario2_DisplayRegion>
    {
        static constexpr auto & value{ L"SDKTemplate.IScenario2_DisplayRegion" };
    };
    template <> struct name<SDKTemplate::IScenario3_Size>
    {
        static constexpr auto & value{ L"SDKTemplate.IScenario3_Size" };
    };
    template <> struct name<SDKTemplate::IScenario4_CompactOverlay>
    {
        static constexpr auto & value{ L"SDKTemplate.IScenario4_CompactOverlay" };
    };
    template <> struct name<SDKTemplate::IScenario5_RelativePositioning>
    {
        static constexpr auto & value{ L"SDKTemplate.IScenario5_RelativePositioning" };
    };
    template <> struct name<SDKTemplate::ISecondaryAppWindowPage>
    {
        static constexpr auto & value{ L"SDKTemplate.ISecondaryAppWindowPage" };
    };
    template <> struct name<SDKTemplate::MainPage>
    {
        static constexpr auto & value{ L"SDKTemplate.MainPage" };
    };
    template <> struct name<SDKTemplate::Scenario1_SecondaryWindow>
    {
        static constexpr auto & value{ L"SDKTemplate.Scenario1_SecondaryWindow" };
    };
    template <> struct name<SDKTemplate::Scenario2_DisplayRegion>
    {
        static constexpr auto & value{ L"SDKTemplate.Scenario2_DisplayRegion" };
    };
    template <> struct name<SDKTemplate::Scenario3_Size>
    {
        static constexpr auto & value{ L"SDKTemplate.Scenario3_Size" };
    };
    template <> struct name<SDKTemplate::Scenario4_CompactOverlay>
    {
        static constexpr auto & value{ L"SDKTemplate.Scenario4_CompactOverlay" };
    };
    template <> struct name<SDKTemplate::Scenario5_RelativePositioning>
    {
        static constexpr auto & value{ L"SDKTemplate.Scenario5_RelativePositioning" };
    };
    template <> struct name<SDKTemplate::SecondaryAppWindowPage>
    {
        static constexpr auto & value{ L"SDKTemplate.SecondaryAppWindowPage" };
    };
    template <> struct name<SDKTemplate::XamlMetaDataProvider>
    {
        static constexpr auto & value{ L"SDKTemplate.XamlMetaDataProvider" };
    };
    template <> struct name<SDKTemplate::NotifyType>
    {
        static constexpr auto & value{ L"SDKTemplate.NotifyType" };
    };
    template <> struct name<SDKTemplate::Scenario>
    {
        static constexpr auto & value{ L"SDKTemplate.Scenario" };
    };
    template <> struct guid_storage<SDKTemplate::IMainPage>
    {
        static constexpr guid value{ 0xBCD280E2,0xD1F0,0x5851,{ 0xA0,0xFA,0x4B,0xA8,0xFF,0x3A,0x26,0x32 } };
    };
    template <> struct guid_storage<SDKTemplate::IMainPageStatics>
    {
        static constexpr guid value{ 0x42CD93B7,0xA486,0x5BB8,{ 0x81,0xA0,0xF5,0x17,0x62,0xF8,0xA1,0x6F } };
    };
    template <> struct guid_storage<SDKTemplate::IScenario1_SecondaryWindow>
    {
        static constexpr guid value{ 0x6C7826F5,0x84B2,0x534C,{ 0xA6,0x8F,0xD6,0x0D,0x38,0x14,0xB6,0x81 } };
    };
    template <> struct guid_storage<SDKTemplate::IScenario2_DisplayRegion>
    {
        static constexpr guid value{ 0x0249AC08,0x2A95,0x58F5,{ 0xAB,0xCB,0x66,0x63,0x2A,0xF2,0x00,0xFE } };
    };
    template <> struct guid_storage<SDKTemplate::IScenario3_Size>
    {
        static constexpr guid value{ 0xB3F60FBC,0x14D8,0x5A7B,{ 0xA9,0xA7,0x52,0x18,0x62,0x6C,0xF6,0x18 } };
    };
    template <> struct guid_storage<SDKTemplate::IScenario4_CompactOverlay>
    {
        static constexpr guid value{ 0x4F456F38,0xA4BD,0x5FD4,{ 0xAD,0xEB,0x2F,0xB8,0xAC,0x14,0x6E,0xA9 } };
    };
    template <> struct guid_storage<SDKTemplate::IScenario5_RelativePositioning>
    {
        static constexpr guid value{ 0x04CF33AF,0x3282,0x5C2B,{ 0x9A,0xD5,0x22,0xDD,0x45,0x1B,0xE6,0x97 } };
    };
    template <> struct guid_storage<SDKTemplate::ISecondaryAppWindowPage>
    {
        static constexpr guid value{ 0xE3E009C1,0x135B,0x548B,{ 0xA6,0x7A,0x16,0x05,0x84,0x45,0x80,0x98 } };
    };
    template <> struct default_interface<SDKTemplate::MainPage>
    {
        using type = SDKTemplate::IMainPage;
    };
    template <> struct default_interface<SDKTemplate::Scenario1_SecondaryWindow>
    {
        using type = SDKTemplate::IScenario1_SecondaryWindow;
    };
    template <> struct default_interface<SDKTemplate::Scenario2_DisplayRegion>
    {
        using type = SDKTemplate::IScenario2_DisplayRegion;
    };
    template <> struct default_interface<SDKTemplate::Scenario3_Size>
    {
        using type = SDKTemplate::IScenario3_Size;
    };
    template <> struct default_interface<SDKTemplate::Scenario4_CompactOverlay>
    {
        using type = SDKTemplate::IScenario4_CompactOverlay;
    };
    template <> struct default_interface<SDKTemplate::Scenario5_RelativePositioning>
    {
        using type = SDKTemplate::IScenario5_RelativePositioning;
    };
    template <> struct default_interface<SDKTemplate::SecondaryAppWindowPage>
    {
        using type = SDKTemplate::ISecondaryAppWindowPage;
    };
    template <> struct default_interface<SDKTemplate::XamlMetaDataProvider>
    {
        using type = Windows::UI::Xaml::Markup::IXamlMetadataProvider;
    };
    template <> struct abi<SDKTemplate::IMainPage>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL NotifyUser(void*, int32_t) noexcept = 0;
            virtual int32_t WINRT_CALL Navigate(struct struct_Windows_UI_Xaml_Interop_TypeName, void*) noexcept = 0;
        };
    };
    template <> struct abi<SDKTemplate::IMainPageStatics>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
            virtual int32_t WINRT_CALL get_FEATURE_NAME(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_scenarios(void**) noexcept = 0;
            virtual int32_t WINRT_CALL get_Current(void**) noexcept = 0;
        };
    };
    template <> struct abi<SDKTemplate::IScenario1_SecondaryWindow>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<SDKTemplate::IScenario2_DisplayRegion>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<SDKTemplate::IScenario3_Size>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<SDKTemplate::IScenario4_CompactOverlay>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<SDKTemplate::IScenario5_RelativePositioning>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <> struct abi<SDKTemplate::ISecondaryAppWindowPage>
    {
        struct WINRT_NOVTABLE type : inspectable_abi
        {
        };
    };
    template <typename D>
    struct consume_SDKTemplate_IMainPage
    {
        void NotifyUser(param::hstring const& strMessage, SDKTemplate::NotifyType const& type) const;
        void Navigate(Windows::UI::Xaml::Interop::TypeName const& name, Windows::Foundation::IInspectable const& parameter) const;
    };
    template <> struct consume<SDKTemplate::IMainPage>
    {
        template <typename D> using type = consume_SDKTemplate_IMainPage<D>;
    };
    template <typename D>
    struct consume_SDKTemplate_IMainPageStatics
    {
        hstring FEATURE_NAME() const;
        Windows::Foundation::Collections::IVector<SDKTemplate::Scenario> scenarios() const;
        SDKTemplate::MainPage Current() const;
    };
    template <> struct consume<SDKTemplate::IMainPageStatics>
    {
        template <typename D> using type = consume_SDKTemplate_IMainPageStatics<D>;
    };
    template <typename D>
    struct consume_SDKTemplate_IScenario1_SecondaryWindow
    {
    };
    template <> struct consume<SDKTemplate::IScenario1_SecondaryWindow>
    {
        template <typename D> using type = consume_SDKTemplate_IScenario1_SecondaryWindow<D>;
    };
    template <typename D>
    struct consume_SDKTemplate_IScenario2_DisplayRegion
    {
    };
    template <> struct consume<SDKTemplate::IScenario2_DisplayRegion>
    {
        template <typename D> using type = consume_SDKTemplate_IScenario2_DisplayRegion<D>;
    };
    template <typename D>
    struct consume_SDKTemplate_IScenario3_Size
    {
    };
    template <> struct consume<SDKTemplate::IScenario3_Size>
    {
        template <typename D> using type = consume_SDKTemplate_IScenario3_Size<D>;
    };
    template <typename D>
    struct consume_SDKTemplate_IScenario4_CompactOverlay
    {
    };
    template <> struct consume<SDKTemplate::IScenario4_CompactOverlay>
    {
        template <typename D> using type = consume_SDKTemplate_IScenario4_CompactOverlay<D>;
    };
    template <typename D>
    struct consume_SDKTemplate_IScenario5_RelativePositioning
    {
    };
    template <> struct consume<SDKTemplate::IScenario5_RelativePositioning>
    {
        template <typename D> using type = consume_SDKTemplate_IScenario5_RelativePositioning<D>;
    };
    template <typename D>
    struct consume_SDKTemplate_ISecondaryAppWindowPage
    {
    };
    template <> struct consume<SDKTemplate::ISecondaryAppWindowPage>
    {
        template <typename D> using type = consume_SDKTemplate_ISecondaryAppWindowPage<D>;
    };
    struct struct_SDKTemplate_Scenario
    {
        void* Title;
        struct{ void* Name; int32_t Kind; } ClassName;
    };
    template <> struct abi<SDKTemplate::Scenario>
    {
        using type = struct_SDKTemplate_Scenario;
    };
}
#endif
